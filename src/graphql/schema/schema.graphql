type Query {
  getUsers(email: String!, userId: ID!): UserResponse!
  getSentInvites(userId: ID!): SentInvitesResponse!
  getReceivedInvites(userId: ID!): InvitePoolResponse!
  getUsersByIds(userIds: [ID!]!): UserResponse!
}

type Mutation {
  sendInvite(input: InviteInput!): InviteResponse!
}

type Subscription {
  moveMade: String
}

type UserResponse {
  success: Boolean!
  data: [User!]!
}

type User {
  _id: ID!
  name: String
  email: String!
}

input InviteInput {
  fromUserId: ID!
  toUserId: ID!
}

type InviteResponse {
  success: Boolean!
  message: String
  invite: SimpleInvite
}

type SimpleInvite {
  _id: ID!
  from: ID!
  to: ID!
  gameId: ID!
}

type InviteUser {
  _id: ID!
  name: String
  email: String!
}

type SentInviteType {
  _id: ID!
  from: ID!
  to: InviteUser!
  gameId: ID!
}

type ReceivedInviteType {
  _id: ID!
  from: InviteUser!
  to: ID!
  gameId: ID!
}

type SentInvitesResponse {
  success: Boolean!
  message: String
  invites: [SentInviteType!]!
}

type InvitePoolResponse {
  success: Boolean!
  message: String
  invites: [ReceivedInviteType!]!
}
